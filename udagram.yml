Description: Udagram Application Stack

Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name for tagging resources
  AmiId:
    Type: String
    Description: The AMI ID for the application instances
  Vpc:
    Type: String
    Description: The VPC ID where the resources will be created
  PublicSubnet1:
    Type: String
    Description: The ID of the first public subnet
  PublicSubnet2:
    Type: String
    Description: The ID of the second public subnet
  PrivateSubnet1:
    Type: String
    Description: The ID of the first private subnet
  PrivateSubnet2:
    Type: String
    Description: The ID of the second private subnet

Resources:
  # Application Load Balancer
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentName}-alb"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AppSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-alb"

  # Application Security Group
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound traffic on port 80 and 443"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref Vpc

  # Launch Template for Auto Scaling Group
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${EnvironmentName}-launch-template"
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Ref AmiId
        NetworkInterfaces:
          - AssociatePublicIpAddress: true 
            DeviceIndex: 0
            Groups:
              - !Ref AppSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt AppInstanceProfile.Arn
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${EnvironmentName}-app-instance"
        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo yum install -y nginx       # Install Nginx
            sudo service nginx start        # Start Nginx
            sudo chkconfig nginx on         # Ensure Nginx starts on boot
            echo "<html><body><h1>Hello, Udagram!</h1></body></html>" > /usr/share/nginx/html/index.html

  # Auto Scaling Group for Application Instances
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref AppTargetGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-app-auto-scaling"
          PropagateAtLaunch: true

  # Target Group for Load Balancer
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${EnvironmentName}-target-group"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-target-group"

  # Load Balancer Listener
  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  # S3 Bucket for File Storage
  AppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "udagram-${EnvironmentName}-s3-bucket-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-s3-bucket"

  # S3 Bucket Policy for File Access
  AppS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::udagram-${EnvironmentName}-s3-bucket-${AWS::AccountId}-${AWS::Region}/*"
            Principal: "*"

  # EC2 Instance Profile for Application to Access S3
  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AppRole

  # IAM Role for Application to Access S3
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::udagram-${EnvironmentName}-s3-bucket-${AWS::AccountId}-${AWS::Region}"
                  - !Sub "arn:aws:s3:::udagram-${EnvironmentName}-s3-bucket-${AWS::AccountId}-${AWS::Region}/*"

Outputs:
  PublicSubnet1Id:
    Description: "Public Subnet 1 ID"
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: "Public Subnet 2 ID"
    Value: !Ref PublicSubnet2

  PrivateSubnet1Id:
    Description: "Private Subnet 1 ID"
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: "Private Subnet 2 ID"
    Value: !Ref PrivateSubnet2

  AppS3BucketName:
    Description: "S3 Bucket Name for File Storage"
    Value: !Ref AppS3Bucket

  LoadBalancerDNS:
    Description: "DNS name of the Application Load Balancer"
    Value: !GetAtt AppLoadBalancer.DNSName
